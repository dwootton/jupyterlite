{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/marked/lib/marked.esm.js"],"names":["getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","this","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","next","leading","tabs","repeat","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parser","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","message","setOptions","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","lexInline"],"mappings":"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","file":"3308.03624912593a42120dea.js?v=03624912593a42120dea","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^( {0,${Math.min(3, indent - 1)}})(\\`\\`\\`|~~~)`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (this.rules.block.heading.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inline(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inline(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"sourceRoot":""}