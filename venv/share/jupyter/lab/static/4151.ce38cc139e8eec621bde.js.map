{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/lib0/broadcastchannel.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/sync.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/auth.js","webpack://@jupyterlab/application-top/./node_modules/lib0/url.js","webpack://@jupyterlab/application-top/./node_modules/y-websocket/src/y-websocket.js"],"names":["channels","Map","LocalStoragePolyfill","constructor","room","this","onmessage","storage","e","key","data","buffer","newValue","postMessage","buf","BC","BroadcastChannel","getChannel","map","subs","set","bc","forEach","sub","subscribe","f","add","unsubscribe","channel","unsubscribed","delete","size","close","publish","origin","c","messageYjsSyncStep1","messageYjsSyncStep2","messageYjsUpdate","writeSyncStep1","encoder","doc","sv","writeSyncStep2","encodedStateVector","readSyncStep1","decoder","decoding","readSyncStep2","transactionOrigin","error","console","writeUpdate","update","readUpdate","readSyncMessage","messageType","Error","messagePermissionDenied","writePermissionDenied","reason","encoding","writeVarUint","writeVarString","readAuthMessage","y","permissionDeniedHandler","decodeQueryParams","url","query","urlQuerySplit","split","pairs","length","i","item","pair","decodeURIComponent","encodeQueryParams","params","object","val","encodeURIComponent","join","messageSync","messageQueryAwareness","messageAwareness","messageAuth","messageHandlers","provider","emitSynced","_messageType","syncMessageType","synced","_decoder","_emitSynced","awareness","Array","from","getStates","keys","_encoder","_ydoc","messageReconnectTimeout","warn","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onerror","emit","onclose","filter","client","clientID","status","wsUnsuccessfulReconnects","setTimeout","math","maxBackoffTime","onopen","getLocalState","encoderAwarenessState","broadcastMessage","readyState","OPEN","bcconnected","bcChannel","WebsocketProvider","serverUrl","roomname","connect","WebSocketPolyfill","WebSocket","resyncInterval","disableBc","super","slice","encodedParams","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","on","_awarenessUpdateHandler","added","updated","removed","_origin","changedClients","concat","_unloadHandler","window","addEventListener","process","_checkInterval","state","destroy","clearInterval","disconnect","removeEventListener","off","connectBc","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc"],"mappings":"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","file":"4151.ce38cc139e8eec621bde.js?v=ce38cc139e8eec621bde","sourcesContent":["/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\n/* istanbul ignore next */\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n/* istanbul ignore next */\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = set.create()\n    const bc = new BC(room)\n    /* istanbul ignore next */\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => {\n  getChannel(room).subs.add(f)\n  return f\n}\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => {\n  const channel = getChannel(room)\n  const unsubscribed = channel.subs.delete(f)\n  /* istanbul ignore else */\n  if (unsubscribed && channel.subs.size === 0) {\n    channel.bc.close()\n    channels.delete(room)\n  }\n  return unsubscribed\n}\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nexport const messageSync = 0\nexport const messageQueryAwareness = 3\nexport const messageAwareness = 1\nexport const messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (\n  encoder,\n  decoder,\n  provider,\n  emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(\n    decoder,\n    encoder,\n    provider.doc,\n    provider\n  )\n  if (\n    emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n    !provider.synced\n  ) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (\n  encoder,\n  _decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(\n    encoder,\n    awarenessProtocol.encodeAwarenessUpdate(\n      provider.awareness,\n      Array.from(provider.awareness.getStates().keys())\n    )\n  )\n}\n\nmessageHandlers[messageAwareness] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  awarenessProtocol.applyAwarenessUpdate(\n    provider.awareness,\n    decoding.readVarUint8Array(decoder),\n    provider\n  )\n}\n\nmessageHandlers[messageAuth] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  authProtocol.readAuthMessage(\n    decoder,\n    provider.doc,\n    (_ydoc, reason) => permissionDeniedHandler(provider, reason)\n  )\n}\n\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) =>\n  console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = (provider) => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = (event) => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onerror = (event) => {\n      provider.emit('connection-error', [event, provider])\n    }\n    websocket.onclose = (event) => {\n      provider.emit('connection-close', [event, provider])\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(\n          provider.awareness,\n          Array.from(provider.awareness.getStates().keys()).filter((client) =>\n            client !== provider.doc.clientID\n          ),\n          provider\n        )\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // using exponential backoff starting with 100ms\n      setTimeout(\n        setupWS,\n        math.min(\n          math.pow(2, provider.wsUnsuccessfulReconnects) * 100,\n          provider.maxBackoffTime\n        ),\n        provider\n      )\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(\n          encoderAwarenessState,\n          awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [\n            provider.doc.clientID\n          ])\n        )\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  const ws = provider.ws\n  if (provider.wsconnected && ws && ws.readyState === ws.OPEN) {\n    ws.send(buf)\n  }\n  if (provider.bcconnected) {\n    bc.publish(provider.bcChannel, buf, provider)\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */\n  constructor (serverUrl, roomname, doc, {\n    connect = true,\n    awareness = new awarenessProtocol.Awareness(doc),\n    params = {},\n    WebSocketPolyfill = WebSocket,\n    resyncInterval = -1,\n    maxBackoffTime = 2500,\n    disableBc = false\n  } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.maxBackoffTime = maxBackoffTime\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname +\n      (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.disableBc = disableBc\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */\n    this._bcSubscriber = (data, origin) => {\n      if (origin !== this) {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder), this)\n        }\n      }\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} _origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, _origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoder,\n        awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients)\n      )\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._unloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(\n        this.awareness,\n        [doc.clientID],\n        'window unload'\n      )\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._unloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (\n        this.wsconnected &&\n        messageReconnectTimeout <\n          time.getUnixTime() - this.wsLastMessageReceived\n      ) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._unloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (this.disableBc) {\n      return\n    }\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync), this)\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderState), this)\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessQuery),\n      this\n    )\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoderAwarenessState,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ])\n    )\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessState),\n      this\n    )\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoder,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ], new Map())\n    )\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n"],"sourceRoot":""}